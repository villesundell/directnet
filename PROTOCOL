A DirectNet node is an independently operating server and client, which must
have two variables: a nickname and an encryption key (public and private),
using RSA. The server listens to TCP port 3336 by default, though any port is
acceptable.

When a DirectNet node connects to another node, a handshaking command, 'key',
is sent. This informs the other node of the nickname and encryption key of this
node. After that, all commands can be sent and received by both parties.
Neither functions as a server or a client, they are equal nodes.

Protocol messages are sent in the form of a three-character command, followed
by a two-character version number, followed by any number of ';'-delimited
parameters, followed by a null terminator. Any message sent in this format
should be read properly, though it may or may not be a valid protocol command.  

There are four types of commands: direct, routed, nonlooping unrouted and
nonrepeating unrouted.

Direct commands are sent directly over a connection and are not continued.

Routed commands have a set route as the first parameter, and all of the nodes
along that route strip off their name then continue the transfer until the data
is sent to the last node on the list (at which point it will have an empty
route). The last node will receive and interpret the command.

Unrouted commands are the rare few that simply emit throughout the network.
Nonlooping unrouted messages contain a parameter for the route that they have
taken to get to the current node, and any other parameters. The node reads this
parameter and verifies that it is not on it before continuing. Nonrepeating
unrouted messages contain a parameter for the transmission key, which is simply
a unique generated key. The receiving node checks this key to make sure it
hasn't received it before.

The protocol commands are documented in alphabetical order in this format:
command(first version char)(second version char) (brief summary)
        purpose: The purpose of the command
        parameters:
                A list of the parameters that are sent with this command


PROTOCOL COMMANDS:

cjo(1)(1) (chat join)
        purpose: Join a chat
        type: routed
        parameters:
                route
                channel
                local name

clv(1)(1) (chat leave)
        purpose: Leave a chat
        type: routed
        parameters:
                route
                channel
                local name

cms(1)(1) (chat message)
        purpose: Send a message on a chat channel
        type: routed
        parameters:
                route
                transmission key
                intermediate name: the person sending this package
                channel
                local name: the person who made the message
                encrypted message

con(1)(1) (chat on)
        purpose: Echo to cjo
        type: routed
        parameters:
                route
                channel
                local name

dcr(1)(1) (direct connect request)
        purpose: Attempt to directly connect to a remote user (also causes a dce)
        type: routed
        parameters:
                route
                local name
                local IP/hostname

dce(1)(1) (direct connect request echo)
        purpose: Same as dcr, but is an echo to dcr (in case connection is only possible one way)
        type: routed
        parameters:
                route
                local name
                local IP/hostname

fnd(1)(1) (find)
        purpose: Find a user by name
        type: nonlooping unrouted
        parameters:
                current route
                local name
                remote name
                public key


fnr(1)(1) (find response)
        purpose: Respond to a find by sending back the received route
        type: routed
        parameters:
                route
                local name
                route back
                public key

key(1)(1) (key)
        purpose: Identify yourself to a new connection
        type: direct
        parameters:
                local name
                public key


lst(1)(1) (lost route)
        purpose: Identify when a route has been lost (sent to the sender of msg, etc)
        type: routed
        parameters:
                route
                end user


msa(1)(1) (message away)
        purpose: Away response to a message
        type: routed
        parameters:
                route
                local name
                encrypted message


msg(1)(1) (message)
        purpose: Send a message
        type: routed
        parameters:
                route
                local name
                encrypted message

pin(1)(1) (ping)
        purpose: Ping a connection for keepalive (no pong yet)
        type: direct
        parameters: none
