This document is under heavy revision, since protocol v2 is under construction.

THE CURRENT PROTOCOL VERSION IS 2.0. This means that the 'dni' message will be
sent with '2.0' as the protocol number.

A DirectNet node is an independently operating server and client, which must
have two variables: a nickname and an encryption key (public and private),
using RSA. The server listens to TCP port 3447 by default, though any port is
acceptable.

When a DirectNet node connects to another node, a handshaking command, 'dni',
is sent. This informs the other node of the nickname and encryption key of this
node. After that, all commands can be sent and received by both parties.
Neither functions as a server or a client, they are equal nodes.

The protocol header is as follows:

Information | Size | Description
------------+------+-------------
       type |    1 | The type of the message:
            |      |   0 for direct messages
            |      |   1 for routed messages
            |      |   2 for special messages (generally routed but needs
            |      |     special functionality)
    command |    3 | A three-character string name of the command.
    version |    2 | The version of the command.
 parameters |  Var | Two bigendian bytes for each parameter, with the value of
            |      | the size of that parameter.  Terminated with \xFF\xFF

After that, the parameters are appended. They must be of the sizes described in
the header.

The type of command dictates how it is to propogate through the network.

Direct commands are sent directly over a connection and are not continued.

Routed commands have a set route as the first parameter, and all of the nodes
along that route strip off their name then continue the transfer until the data
is sent to the last node on the list (at which point it will have an empty
route). The last node will receive and interpret the command.

Special commands propogate but the propogation is not simply routed, therefore
more program logic is requird to parse them.

All routed commands and some special commands have a route as the first
parameter. This route takes the form of any number of one-byte element-lengths,
followed by a byte with the value \xFF, follwed by each of the route elements,
which must be of the lenghts described. Route elements are SHA-256 hashes of
encryption keys.

The protocol commands are documented in alphabetical order in this format:
command(first version char)(second version char) (brief summary)
        purpose: The purpose of the command
        type: The type
        parameters:
                A list of the parameters that are sent with this command


PROTOCOL COMMANDS:

cjo(1)(1) (chat join)
        purpose: Join a chat
        type: routed
        parameters:
                route
                local name
                channel

clv(1)(1) (chat leave)
        purpose: Leave a chat
        type: routed
        note: not properly implemented
        parameters:
                route
                local name
                channel

cms(1)(1) (chat message)
        purpose: Send a message on a chat channel
        type: routed
        parameters:
                route
                intermediate name: the person sending this package
                transmission key
                channel
                local name: the person who made the message
                encrypted message

con(1)(1) (chat on)
        purpose: Echo to cjo
        type: routed
        parameters:
                route
                local name
                channel

dcr(1)(1) (direct connect request)
        purpose: Attempt to directly connect to a remote user (also causes a dce)
        type: routed
        parameters:
                route
                local name
                local IP/hostname
        note: This will soon be subsumed by the (yet undocumented) scr (short
              circuit request)

dce(1)(1) (direct connect request echo)
        purpose: Same as dcr, but is an echo to dcr (in case connection is only possible one way)
        type: routed
        parameters:
                route
                local name
                local IP/hostname

dni(1)(1) (DirectNet identity)
        purpose: Identify yourself to a new connection
        type: direct
        parameters:
                local name
                public key
                protocol version
                        2 byte big-endian major (currently 2, must match exactly)
                        2 byte big-endian minor (currently 0, if lower should translate)


fnd(1)(1) (find)
        purpose: Find a user by name
        type: special - nonlooping unrouted
        parameters:
                current route
                local name
                remote name
                public key


fnr(1)(1) (find response)
        purpose: Respond to a find by sending back the received route
        type: special - routed but with intermediate handling
        parameters:
                route
                local name
                route back
                public key

lst(1)(1) (lost route)
        purpose: Identify when a route has been lost (sent to the sender of msg, etc)
        type: routed
        parameters:
                route
                end user


msa(1)(1) (message away)
        purpose: Away response to a message
        type: routed
        parameters:
                route
                local name
                encrypted message


msg(1)(1) (message)
        purpose: Send a message
        type: routed
        parameters:
                route
                local name
                encrypted message

pin(1)(1) (ping)
        purpose: Ping a connection for keepalive (no pong yet)
        type: direct
        parameters: none
